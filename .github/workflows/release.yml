name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: false
        type: string

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-C link-arg=-s"

jobs:
  check:
    name: Quick Check
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust-check"

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy -- -D warnings
        env:
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"

      - name: Run cargo check
        run: cargo check --all-features --locked
        env:
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"

  release:
    needs: check
    name: Build and Release
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust-release-aarch64"

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Determine version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG=v$VERSION" >> $GITHUB_OUTPUT

      - name: Build release binary
        run: |
          cargo build --release --locked --target aarch64-apple-darwin
          cp target/aarch64-apple-darwin/release/ankura ankura-apple-silicon
        env:
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 16

      - name: Create tarball
        run: |
          tar czf ankura-${{ steps.version.outputs.TAG }}-aarch64-apple-darwin.tar.gz ankura-apple-silicon
          shasum -a 256 ankura-${{ steps.version.outputs.TAG }}-aarch64-apple-darwin.tar.gz > ankura-${{ steps.version.outputs.TAG }}-aarch64-apple-darwin.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ankura-apple-silicon
          path: |
            ankura-${{ steps.version.outputs.TAG }}-aarch64-apple-darwin.tar.gz
            ankura-${{ steps.version.outputs.TAG }}-aarch64-apple-darwin.sha256

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.TAG }}
          name: Release ${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ankura-${{ steps.version.outputs.TAG }}-aarch64-apple-darwin.tar.gz
            ankura-${{ steps.version.outputs.TAG }}-aarch64-apple-darwin.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-tap:
    name: Update Homebrew Tap
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Get version
        id: version
        run: |
          VERSION="${{ github.ref_name }}"
          if [[ "$VERSION" == "production" ]]; then
            VERSION=$(curl -s https://api.github.com/repos/lrangell/ankura/releases/latest | jq -r '.tag_name')
          fi
          echo "VERSION=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "TAG=$VERSION" >> $GITHUB_OUTPUT

      - name: Download release artifacts
        run: |
          mkdir -p artifacts
          cd artifacts

          curl -L -o "ankura-${{ steps.version.outputs.TAG }}-aarch64-apple-darwin.tar.gz" \
            "https://github.com/lrangell/ankura/releases/download/${{ steps.version.outputs.TAG }}/ankura-${{ steps.version.outputs.TAG }}-aarch64-apple-darwin.tar.gz"

          curl -L -o "ankura-${{ steps.version.outputs.TAG }}-aarch64-apple-darwin.sha256" \
            "https://github.com/lrangell/ankura/releases/download/${{ steps.version.outputs.TAG }}/ankura-${{ steps.version.outputs.TAG }}-aarch64-apple-darwin.sha256"

      - name: Extract checksum
        id: checksum
        run: |
          ARM_CHECKSUM=$(cat artifacts/ankura-${{ steps.version.outputs.TAG }}-aarch64-apple-darwin.sha256 | cut -d' ' -f1)
          echo "arm_checksum=${ARM_CHECKSUM}" >> $GITHUB_OUTPUT

      - name: Checkout tap repository
        uses: actions/checkout@v4
        with:
          repository: lrangell/homebrew-ankura
          token: ${{ secrets.GH_PAT }}
          path: tap
          ref: main

      - name: Update formula
        run: |
          cd tap

          # Update version
          sed -i 's/version ".*"/version "${{ steps.version.outputs.VERSION }}"/' Formula/ankura.rb

          # Update checksum
          sed -i 's/sha256 ".*"/sha256 "${{ steps.checksum.outputs.arm_checksum }}"/' Formula/ankura.rb

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add Formula/ankura.rb
          git commit -m "Update ankura to ${{ steps.version.outputs.VERSION }}"
          git push
