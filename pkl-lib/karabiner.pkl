/// Core types and classes for Karabiner-Elements configuration
module karabiner

/// The root configuration object for Karabiner-Elements
class Config {
  /// The title shown in Karabiner-Elements UI
  title: String = "Karabiner-Pkl Configuration"
  /// List of profiles (at least one required)
  profiles: List<Profile> = List(
    new Profile {
      name = "pkl"
      selected = true
    }
  )
  /// Global settings that apply to all profiles
  global: Global?
}

/// Global settings for Karabiner-Elements
class Global {
  /// Check for updates on startup
  check_for_updates_on_startup: Boolean = true
  /// Show icon in menu bar
  show_in_menu_bar: Boolean = true
  /// Show profile name in menu bar
  show_profile_name_in_menu_bar: Boolean = false
}

/// A configuration profile
class Profile {
  /// Profile name (must be unique)
  name: String
  /// Whether this profile is active
  selected: Boolean = false
  /// Virtual keyboard settings
  virtual_hid_keyboard: VirtualHidKeyboard?
  /// Device-specific configurations
  devices: List<Device> = List()
  /// Function key mappings
  fn_function_keys: List<FnFunctionKey> = List()
  /// Simple key remappings
  simple_modifications: List<SimpleModification> = List()
  /// Complex modifications with conditions
  complex_modifications: ComplexModifications?
  /// Timing parameters
  parameters: Parameters?
}

/// Virtual HID keyboard settings
class VirtualHidKeyboard {
  /// Country code (0 = US)
  country_code: Int = 0
  /// Show sticky modifier state
  indicate_sticky_modifier_keys_state: Boolean = true
  /// Mouse key movement scale
  mouse_key_xy_scale: Int = 100
}

/// Device-specific configuration
class Device {
  /// Device identifiers
  identifiers: DeviceIdentifiers
  /// Ignore this device
  ignore: Boolean = false
  /// Disable built-in keyboard when connected
  disable_built_in_keyboard_if_exists: Boolean = false
  /// Function key mappings for this device
  fn_function_keys: List<FnFunctionKey> = List()
  /// Simple modifications for this device
  simple_modifications: List<SimpleModification> = List()
  /// Control Caps Lock LED
  manipulate_caps_lock_led: Boolean = false
}

/// Device identification
class DeviceIdentifiers {
  /// USB vendor ID
  vendor_id: Int
  /// USB product ID
  product_id: Int
  /// Is a keyboard device
  is_keyboard: Boolean = true
  /// Is a pointing device
  is_pointing_device: Boolean = false
}

/// Function key mapping
class FnFunctionKey {
  /// Function key to remap
  from: KeyCode
  /// Events to generate
  to: List<ToEvent>
}

/// Simple one-to-one key remapping
class SimpleModification {
  /// Key to remap from
  from: KeyCode
  /// Key to remap to
  to: KeyCode
}

/// Container for complex modification rules
class ComplexModifications {
  /// Timing parameters for all rules
  parameters: ComplexModificationParameters?
  /// List of modification rules
  rules: List<Rule>
}

/// Timing parameters for complex modifications
class ComplexModificationParameters {
  /// Max time between simultaneous key presses (ms)
  `basic.simultaneous_threshold_milliseconds`: Int = 50
  /// Delay before delayed actions (ms)
  `basic.to_delayed_action_delay_milliseconds`: Int = 500
  /// Timeout for to_if_alone (ms)
  `basic.to_if_alone_timeout_milliseconds`: Int = 1000
  /// Threshold for to_if_held_down (ms)
  `basic.to_if_held_down_threshold_milliseconds`: Int = 500
}

/// A complex modification rule
class Rule {
  /// Human-readable description
  description: String
  /// List of manipulators for this rule
  manipulators: List<Manipulator>
}

/// A key manipulator that transforms inputs to outputs
class Manipulator {
  /// Type of manipulator
  type: ManipulatorType = "basic"
  /// Input event to match
  from: FromEvent
  /// Events when key pressed
  to: List<ToEvent>?
  /// Events when key pressed alone
  to_if_alone: List<ToEvent>?
  /// Events after key released
  to_after_key_up: List<ToEvent>?
  /// Delayed actions
  to_delayed_action: DelayedAction?
  /// Conditions for activation
  conditions: List<Condition>?
  /// Override timing parameters
  parameters: ManipulatorParameters?
}

/// Manipulator types
typealias ManipulatorType = "basic" | "mouse_motion_to_scroll"

/// Input event that triggers a manipulator
class FromEvent {
  /// Regular keyboard key
  key_code: KeyCode?
  /// Media/consumer key
  consumer_key_code: ConsumerKeyCode?
  /// Mouse button
  pointing_button: PointingButton?
  /// Required modifiers
  modifiers: Modifiers?
  /// Simultaneous keys
  simultaneous: List<FromEvent>?
  /// Simultaneous detection options
  simultaneous_options: SimultaneousOptions?
}

/// Output event generated by a manipulator
class ToEvent {
  /// Key to press
  key_code: KeyCode?
  /// Media key to press
  consumer_key_code: ConsumerKeyCode?
  /// Mouse button to click
  pointing_button: PointingButton?
  /// Shell command to run
  shell_command: String?
  /// Input source to switch to
  select_input_source: InputSource?
  /// Variable to set
  set_variable: SetVariable?
  /// Mouse movement/scroll
  mouse_key: MouseKey?
  /// Sticky modifier
  sticky_modifier: StickyModifier?
  /// Modifiers to apply
  modifiers: List<Modifier>?
  /// Use lazy evaluation
  lazy: Boolean?
  /// Allow key repeat
  repeat: Boolean?
  /// Stop processing
  halt: Boolean?
  /// Hold duration (ms)
  hold_down_milliseconds: Int?
}

/// Delayed action with different outcomes
class DelayedAction {
  /// Events if delay completes
  to_if_invoked: List<ToEvent>
  /// Events if canceled
  to_if_canceled: List<ToEvent>
}

/// Condition for manipulator activation
class Condition {
  /// Type of condition
  type: ConditionType
  /// App bundle IDs
  bundle_identifiers: List<String>?
  /// File paths to check
  file_paths: List<String>?
  /// Input source ID
  input_source_id: String?
  /// Input language
  input_source_language: String?
  /// Keyboard types
  keyboard_types: List<KeyboardType>?
  /// Variable name
  name: String?
  /// Variable value
  value: Int | String | Boolean?
}

/// Condition types
typealias ConditionType = "frontmost_application_if" | "frontmost_application_unless" | "device_if" | "device_unless" | "keyboard_type_if" | "keyboard_type_unless" | "input_source_if" | "input_source_unless" | "variable_if" | "variable_unless"

/// Keyboard layout types
typealias KeyboardType = "ansi" | "iso" | "jis"

/// Modifier key requirements
class Modifiers {
  /// Must be pressed
  mandatory: List<Modifier>?
  /// May be pressed
  optional: List<Modifier>?
}

/// Modifier keys
typealias Modifier = "caps_lock" | "left_command" | "left_control" | "left_option" | "left_shift" | "right_command" | "right_control" | "right_option" | "right_shift" | "fn" | "command" | "control" | "option" | "shift" | "any"

/// Options for simultaneous key detection
class SimultaneousOptions {
  /// Require uninterrupted key press
  detect_key_down_uninterruptedly: Boolean?
  /// Key down order
  key_down_order: "insensitive" | "strict" | "strict_inverse"?
  /// Key up order
  key_up_order: "insensitive" | "strict" | "strict_inverse"?
  /// When to trigger key up
  hidden key_up_when: "any" | "all"?
  /// Events after all keys released
  to_after_key_up: List<ToEvent>?
}

/// Input source configuration
class InputSource {
  /// Language code
  language: String?
  /// Input source ID
  input_source_id: String?
  /// Input mode ID
  input_mode_id: String?
}

/// Variable assignment
class SetVariable {
  /// Variable name
  name: String
  /// Variable value
  value: String | Int | Boolean
}

/// Mouse control
class MouseKey {
  /// Horizontal movement
  x: Int?
  /// Vertical movement
  y: Int?
  /// Vertical scroll
  vertical_wheel: Int?
  /// Horizontal scroll
  horizontal_wheel: Int?
  /// Speed multiplier
  speed_multiplier: Float?
}

/// Sticky modifier configuration
class StickyModifier {
  /// Modifier to make sticky
  modifier: Modifier
}

/// Per-manipulator timing parameters
class ManipulatorParameters {
  /// Simultaneous key threshold (ms)
  `basic.simultaneous_threshold_milliseconds`: Int?
  /// Delayed action delay (ms)
  `basic.to_delayed_action_delay_milliseconds`: Int?
  /// To-if-alone timeout (ms)
  `basic.to_if_alone_timeout_milliseconds`: Int?
  /// To-if-held threshold (ms)
  `basic.to_if_held_down_threshold_milliseconds`: Int?
  /// Mouse scroll speed
  `mouse_motion_to_scroll.speed`: Int?
}

/// General device parameters
class Parameters {
  /// Delay before opening device (ms)
  delay_milliseconds_before_open_device: Int = 1000
}

/// Keyboard key code
typealias KeyCode = String

/// Media/consumer key code
typealias ConsumerKeyCode = String

/// Mouse button
typealias PointingButton = String

/// Type alias for key press events (used in helpers)
typealias KeyPress = ToEvent

/// Simplified configuration API
class SimpleConfig {
  /// Profile name
  profileName: String = "pkl"
  /// Simple remappings
  simple_modifications: List<SimpleModification> = List()
  /// Complex modifications
  complex_modifications: ComplexModifications?
  /// Parameters
  parameters: Parameters?
  /// Device settings
  devices: List<Device> = List()
  
  /// Convert to full Config
  function toConfig(): Config = 
    let (mods = simple_modifications)
    let (complexMods = complex_modifications)
    let (params = parameters)
    let (devs = devices)
    new Config {
      profiles = List(
        new Profile {
          name = profileName
          selected = true
          simple_modifications = mods
          complex_modifications = complexMods
          parameters = params
          devices = devs
        }
      )
    }
}