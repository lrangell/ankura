import "karabiner.pkl"
import "yabai.pkl"

// User-facing configuration properties
name: String = "Default Profile"
rules: List<Any> = List()  // Accepts Rules or constructor objects with .build property
settings: karabiner.ComplexModificationParameters?
yabaiConfig: yabai.Yabai = new yabai.Yabai {}
simpleModifications: List<karabiner.SimpleModification> = List()
devices: List<karabiner.Device> = List()

// Helper function to process rules - automatically call .build() on constructor classes
local function processRules(ruleList: List<Any>): List<karabiner.Rule> =
  ruleList.map((rule) ->
    let (className = rule.getClass().toString())
    if (className == "karabiner#DualUse" || className == "karabiner#SimLayer" || className == "karabiner#Layer")
      rule.build()
    else if (rule.hasProperty("build"))
      rule.build
    else
      rule as karabiner.Rule
  ).toList()

// Generate the karabiner configuration fields directly as module output
title: String = "Karabiner-Pkl Configuration"
profiles: List<karabiner.Profile> = 
  let (profileName = name)
  let (profileSettings = settings)  
  let (profileRules = rules)
  let (profileYabaiConfig = yabaiConfig)
  let (profileSimpleModifications = simpleModifications)
  let (profileDevices = devices)
  List(new karabiner.Profile {
    name = profileName
    selected = true
    complex_modifications = new karabiner.ComplexModifications {
      parameters = profileSettings
      rules = processRules(profileRules) + profileYabaiConfig.build
    }
    simple_modifications = profileSimpleModifications
    devices = profileDevices
  })
global: karabiner.Global?