amends "pkl:test"

import "../pkl/karabiner.pkl" as k
import "../pkl/keys.pkl"

local testLayer = new k.Layer {
  modifier = keys.left_command
  j = keys.left_arrow
  semicolon = keys.up_arrow
}

local testSimLayer = new k.SimLayer {
  trigger = keys.f
  j = keys.left_arrow
  semicolon = keys.up_arrow
}

local testDualUse = new k.DualUse {
  key = keys.caps_lock
  hold = keys.left_control
  tap = keys.escape
}

local testConfig = new k.Config {
  profiles = List()
}

facts {
  ["BaseLayer should inherit common key properties"] {
    // Test that the layer has the expected properties
    testLayer.j == keys.left_arrow
    testLayer.semicolon == keys.up_arrow
    testLayer.modifier == keys.left_command
  }
  
  ["SimLayer should inherit common key properties"] {
    // Test that the simlayer has the expected properties
    testSimLayer.j == keys.left_arrow
    testSimLayer.semicolon == keys.up_arrow
    testSimLayer.trigger == keys.f
  }
  
  ["DualUse should build correctly"] {
    testDualUse.key == keys.caps_lock
    testDualUse.hold == keys.left_control
    testDualUse.tap == keys.escape
  }
  
  ["Config should have default title"] {
    testConfig.title == "Karabiner-Pkl Configuration"
  }
  
  ["Layer build function should produce Rule"] {
    local rule = testLayer.build()
    rule is k.Rule
  }
  
  ["SimLayer build function should produce Rule"] {
    local rule = testSimLayer.build()
    rule is k.Rule
  }
  
  ["DualUse build function should produce Rule"] {
    local rule = testDualUse.build()
    rule is k.Rule
  }
}

examples {
  ["Layer generates correct JSON output"] {
    new k.Layer {
      modifier = keys.left_command
      j = keys.left_arrow
      k = keys.down_arrow
    }.build()
  }
  
  ["SimLayer generates correct JSON output"] {
    new k.SimLayer {
      trigger = keys.f
      j = keys.left_arrow
      k = keys.down_arrow
    }.build()
  }
  
  ["DualUse generates correct JSON output"] {
    new k.DualUse {
      key = keys.caps_lock
      hold = keys.left_control
      tap = keys.escape
    }.build()
  }
  
  ["Complete config with layer"] {
    k.config("test-profile", List(
      new k.Layer {
        modifier = keys.left_command
        j = keys.left_arrow
        k = keys.down_arrow
        l = keys.right_arrow
        semicolon = keys.up_arrow
      }.build()
    ))
  }
}