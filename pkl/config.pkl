open module config
import "karabiner.pkl" as k
import "core.pkl" as core
import "keys.pkl" as keyDefs
import "helpers.pkl" as h
import "yabai.pkl" as y
import "aerospace.pkl" as a
import "builtins.pkl" as b
import "actions.pkl" as ac

karabiner = k
keys = keyDefs
helpers = h  
yabaiModule = y
aerospaceModule = a
builtins = b
actions = import("actions.pkl")
ccore = core

typealias DualUse = core.DualUse
typealias SimLayer = core.SimLayer
typealias Layer = core.Layer
typealias SpaceMode = core.SpaceMode
typealias Rule = k.Rule
typealias Yabai = y.Yabai
typealias AeroSpace = a.AeroSpace
typealias Keys = keyDefs.Keys
typealias Modifiers = keyDefs.Modifiers
typealias Actions = ac.Actions



// keys = new keys {}


name: String = "Default Profile"
rules: List<Any> = List()  // Accepts Rules or constructor objects with .build property
settings: k.ComplexModificationParameters = new k.ComplexModificationParameters {
  `basic.simultaneous_threshold_milliseconds` = 200
  `basic.to_delayed_action_delay_milliseconds` = 580
  `basic.to_if_alone_timeout_milliseconds` = 1000
  `basic.to_if_held_down_threshold_milliseconds` = 1000
}
yabai: y.Yabai = new y.Yabai {}
aerospace: a.AeroSpace = new a.AeroSpace {}
simpleModifications: List<k.SimpleModification> = List()
devices: List<k.Device> = List()

local function processRules(ruleList: List<Any>): List<Any> =
  ruleList.flatMap((rule) ->
    rule.build()
  ).toList()

title: String = "Karabiner-Pkl Configuration"
profiles: List<k.Profile> = 
  let (profileName = name)
  let (profileSettings = settings)  
  let (profileRules = rules)
  let (profileYabai = yabai)
  let (profileAerospace = aerospace)
  let (profileSimpleModifications = simpleModifications)
  let (profileDevices = devices)
  List(new k.Profile {
    name = profileName
    virtual_hid_keyboard = new k.VirtualHidKeyboard {}
    complex_modifications = new k.ComplexModifications {
      parameters = profileSettings
      rules = processRules(profileRules) + profileYabai.build + profileAerospace.build
    }
    simple_modifications = profileSimpleModifications
    devices = profileDevices
  })
global: k.Global?
