import "karabiner.pkl" as k
import "keys.pkl" as keyDefs
import "helpers.pkl" as h
import "yabai.pkl" as y

karabiner = k
keys = keyDefs
helpers = h  
yabai = y

typealias DualUse = k.DualUse
typealias SimLayer = k.SimLayer
typealias Layer = k.Layer
typealias Rule = k.Rule
typealias Yabai = y.Yabai

name: String = "Default Profile"
rules: List<Any> = List()  // Accepts Rules or constructor objects with .build property
settings: k.ComplexModificationParameters?
yabaiConfig: y.Yabai = new y.Yabai {}
simpleModifications: List<k.SimpleModification> = List()
devices: List<k.Device> = List()

local function processRules(ruleList: List<Any>): List<k.Rule> =
  ruleList.map((rule) ->
    let (className = rule.getClass().toString())
    if (className == "karabiner#DualUse" || className == "karabiner#SimLayer" || className == "karabiner#Layer")
      rule.build()
    else if (rule.hasProperty("build"))
      rule.build
    else
      rule as k.Rule
  ).toList()

title: String = "Karabiner-Pkl Configuration"
profiles: List<k.Profile> = 
  let (profileName = name)
  let (profileSettings = settings)  
  let (profileRules = rules)
  let (profileYabaiConfig = yabaiConfig)
  let (profileSimpleModifications = simpleModifications)
  let (profileDevices = devices)
  List(new k.Profile {
    name = profileName
    selected = true
    complex_modifications = new k.ComplexModifications {
      parameters = profileSettings
      rules = processRules(profileRules) + profileYabaiConfig.build
    }
    simple_modifications = profileSimpleModifications
    devices = profileDevices
  })
global: k.Global?