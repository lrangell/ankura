module aerospace

import "karabiner.pkl"
import "core.pkl"

cmdPath = "/opt/homebrew/bin/aerospace"

open class AerospaceMode {
  cmdPath = "/opt/homebrew/bin/aerospace"
  modifier: List<karabiner.Modifier> | karabiner.Modifier | String
  mappings: Mapping<String, String> = new Mapping {}
  action_cmd: String
  ignore = List("manipulators", "defined", "rules", "modifier", "action_cmd", "cmdPath", "ignore", "mappings", "focusShouldFollow")

  function manipulators() = defined().entries.toMap((entry) -> entry.value, (entry) -> core.shell("\(cmdPath) \(action_cmd) \(entry.key)").single)
  function defined() = toMap().filter((key, val) -> !(ignore.contains(key) || val is Null)) + this.mappings.toMap()
  function rules() = if (manipulators().isEmpty) null else new core.SimLayer {trigger = modifier; maps = manipulators().toMapping()}.build().last
}

open class Sequential extends AerospaceMode {
  prev: String?
  next: String?
  first: String?
  last: String?
}

open class Directional extends AerospaceMode {
  left: String?
  down: String?
  up: String?
  right: String?
  prev: String?
  next: String?
}

class WindowFocus extends Directional {
  action_cmd = "focus"
  dfsNext: String?
  dfsPrev: String?
}

class WindowMove extends Directional {
  action_cmd = "move"
}

class WindowResize extends AerospaceMode {
  action_cmd = "resize"
  width: String?
  height: String?
  smart: String?
  smartOpposite: String?
  amount: Int = 100
}

class WindowLayout extends AerospaceMode {
  action_cmd = "layout"
  tiling: String?
  floating: String?
  hTiles: String?
  vTiles: String?
  fullscreen: String?
}

class WindowJoin extends Directional {
  action_cmd = "join-with"
}

class WindowClose extends AerospaceMode {
  action_cmd = "close"
  current: String?
  allButCurrent: String?
}

class WindowNative extends AerospaceMode {
  action_cmd = "macos-native-"
  minimize: String?
  fullscreen: String?
}

class WorkspaceFocus extends Sequential {
  action_cmd = "workspace"
}

class WorkspaceMove extends Sequential {
  focusShouldFollow = true
  action_cmd = if (focusShouldFollow) "move-node-to-workspace --focus-follows-window" else "move-node-to-workspace"
}

class WorkspaceSummon extends Sequential {
  action_cmd = "summon-workspace"
}

class WorkspaceTree extends AerospaceMode {
  action_cmd = ""
  flatten: String?
  accordion: String?
}

class MonitorFocus extends Sequential {
  action_cmd = "focus-monitor"
}

class MonitorMove extends Sequential {
  focusShouldFollow = true
  action_cmd = if (focusShouldFollow) "move-node-to-monitor --focus-follows-window" else "move-node-to-monitor"
}

class ModeBindings extends AerospaceMode {
  action_cmd = "mode"
  trigger: String?
  bindings: Mapping<String, String> = new Mapping {}
  exitKey: String = "escape"
}

class Apps extends AerospaceMode {
  action_cmd = "exec-and-forget"
  launchers: Mapping<String, String> = new Mapping {}
}



class Triggers extends AerospaceMode {
  action_cmd = "trigger-binding"
  macros: Mapping<String, List<String>> = new Mapping {}
}

open class AerospaceFeature {
  modifier: (String|List<String>)?
  function rules() = toMap().fold(List(), (acc, k, v) -> if (k == "modifier" || v?.rules() is Null) acc else acc.add(v.rules()))
}

class Window extends AerospaceFeature {
  focus: WindowFocus?
  move: WindowMove?
  resize: WindowResize?
  layout: WindowLayout?
  join: WindowJoin?
  close: WindowClose?
  native: WindowNative?
}

class Workspace extends AerospaceFeature {
  focus: WorkspaceFocus?
  move: WorkspaceMove?
  summon: WorkspaceSummon?
  tree: WorkspaceTree?
}

class Monitor extends AerospaceFeature {
  focus: MonitorFocus?
  move: MonitorMove?
}

class Modes extends AerospaceFeature {
  resize: ModeBindings?
  layout: ModeBindings?
  service: ModeBindings?
  custom1: ModeBindings?
  custom2: ModeBindings?
  custom3: ModeBindings?
}

class AeroSpace {
  modifier = null
  cmdPath: String = "/opt/homebrew/bin/aerospace"

  window: Window?
  workspace: Workspace?
  monitor: Monitor?
  modes: Modes?
  apps: Apps?
  triggers: Triggers?

  build: List<karabiner.Rule> = List(window, workspace, monitor, modes, apps, triggers).flatMap((f) -> f?.rules() ?? List())
}
